# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import item_pb2 as item__pb2


class ItemizerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateItem = channel.unary_unary(
                '/Itemizer/CreateItem',
                request_serializer=item__pb2.Item.SerializeToString,
                response_deserializer=item__pb2.SuccessResponse.FromString,
                )
        self.CreateItems = channel.unary_unary(
                '/Itemizer/CreateItems',
                request_serializer=item__pb2.Items.SerializeToString,
                response_deserializer=item__pb2.SuccessResponse.FromString,
                )
        self.GetItems = channel.unary_unary(
                '/Itemizer/GetItems',
                request_serializer=item__pb2.NullRequest.SerializeToString,
                response_deserializer=item__pb2.Items.FromString,
                )
        self.CreateItemsStream = channel.stream_unary(
                '/Itemizer/CreateItemsStream',
                request_serializer=item__pb2.Item.SerializeToString,
                response_deserializer=item__pb2.SuccessResponse.FromString,
                )
        self.GetItemsStream = channel.unary_stream(
                '/Itemizer/GetItemsStream',
                request_serializer=item__pb2.NullRequest.SerializeToString,
                response_deserializer=item__pb2.Item.FromString,
                )
        self.FindItemsStream = channel.stream_stream(
                '/Itemizer/FindItemsStream',
                request_serializer=item__pb2.Item.SerializeToString,
                response_deserializer=item__pb2.FoundResponse.FromString,
                )


class ItemizerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateItemsStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItemsStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindItemsStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ItemizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateItem,
                    request_deserializer=item__pb2.Item.FromString,
                    response_serializer=item__pb2.SuccessResponse.SerializeToString,
            ),
            'CreateItems': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateItems,
                    request_deserializer=item__pb2.Items.FromString,
                    response_serializer=item__pb2.SuccessResponse.SerializeToString,
            ),
            'GetItems': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItems,
                    request_deserializer=item__pb2.NullRequest.FromString,
                    response_serializer=item__pb2.Items.SerializeToString,
            ),
            'CreateItemsStream': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateItemsStream,
                    request_deserializer=item__pb2.Item.FromString,
                    response_serializer=item__pb2.SuccessResponse.SerializeToString,
            ),
            'GetItemsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetItemsStream,
                    request_deserializer=item__pb2.NullRequest.FromString,
                    response_serializer=item__pb2.Item.SerializeToString,
            ),
            'FindItemsStream': grpc.stream_stream_rpc_method_handler(
                    servicer.FindItemsStream,
                    request_deserializer=item__pb2.Item.FromString,
                    response_serializer=item__pb2.FoundResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Itemizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Itemizer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Itemizer/CreateItem',
            item__pb2.Item.SerializeToString,
            item__pb2.SuccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Itemizer/CreateItems',
            item__pb2.Items.SerializeToString,
            item__pb2.SuccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Itemizer/GetItems',
            item__pb2.NullRequest.SerializeToString,
            item__pb2.Items.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateItemsStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Itemizer/CreateItemsStream',
            item__pb2.Item.SerializeToString,
            item__pb2.SuccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItemsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Itemizer/GetItemsStream',
            item__pb2.NullRequest.SerializeToString,
            item__pb2.Item.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindItemsStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Itemizer/FindItemsStream',
            item__pb2.Item.SerializeToString,
            item__pb2.FoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
